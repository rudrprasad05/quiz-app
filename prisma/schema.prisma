// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  LEADER
  ADMIN
}

enum MultipleChoice {
  A
  B
  C
  D
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  course         String?
  phone          String?
  email          String         @unique
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           Role           @default(USER)
  accounts       Account[]
  quiz           Quiz[]
  attempts       Attempt[]
  registration   Registration[]
  passUnit       Unit?
  // conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  // orders          Order[]
  // messages        Message[]
  // repairs         RepairOrder[]
  // seller          Seller?
  // giftsOrders     GiftOrder[]
}

model Unit {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  code          String         @unique
  registrations Registration[]
  quizes        Quiz[]
  leaderId      String         @unique @db.ObjectId
  leader        User           @relation(fields: [leaderId], references: [id], onDelete: Cascade)
   createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Quiz {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  week        Int
  unitId      String     @db.ObjectId
  unit        Unit       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  topic       String
  maxAttempts Int
  isPublished Boolean    @default(false)
  authorId    String     @db.ObjectId
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    Attempt[]
   createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Question {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  refId    String?        @unique
  question String
  image    String?
  options  String[]
  quizId   String         @db.ObjectId
  answer   MultipleChoice
  quiz     Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
   createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Attempt {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  total   Int?
  userId  String           @db.ObjectId
  quizId  String           @db.ObjectId
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers MultipleChoice[]
   createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Registration {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  unitId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}
